warehouse_coords <- cbind(warehouses$lon, warehouses$lat)
print(warehouse_coords)
# Tính khoảng cách giữa kho hàng và khách hàng
all_distances <- distm(customer_coords, warehouse_coords, fun = distVincentySphere)
# Khoảng cách nhỏ nhất (đơn vị: mét, chuyển sang kilomet)
min_distances <- apply(all_distances, 1, min)  # khoảng cách nhỏ nhất (m)
merged_data$distance_to_nearest_warehouse <- round(min_distances / 1000, 4)  # đổi sang km
# ----------
# Step 4: Check for Remaining Missing Values
# ----------
na_count <- colSums(is.na(merged_data))
cat("Remaining Missing Values in Each Column:\n")
print(na_count)
#----
# Use BoxPlot to check outliner (unexpected) 2 columns: distnace nearest warehouse and order_total
#-----
# -- Distance_Nearest Warehouses
# Boxplot for Distance to Nearest Warehouse
ggplot(data = merged_data, aes(y = distance_to_nearest_warehouse)) +
geom_boxplot(outlier.shape = 16, outlier.colour = "red", outlier.fill = "red") +
scale_color_manual(values = c("black", "red")) +  # Custom colors for points
theme_minimal() +
labs(
title = "Boxplot for Distance to Nearest Warehouse",
y = "Distance to Nearest Warehouse"
)
# Boxplot for Delivery Charges
ggplot(data = merged_data, aes(y = delivery_charges)) +
geom_boxplot(outlier.shape = 16, outlier.colour = "red", outlier.fill = "red") +
scale_color_manual(values = c("black", "red")) +  # Custom colors for points
theme_minimal() +
labs(
title = "Boxplot for Delivery Charges",
y = "Delivery Charges"
)
# Boxplot for Order Price
ggplot(data = merged_data, aes(y = order_price)) +
geom_boxplot(outlier.shape = 16, outlier.colour = "red", outlier.fill = "red") +
scale_color_manual(values = c("black", "red")) +  # Custom colors for points
theme_minimal() +
labs(
title = "Boxplot for Order Price",
y = "Order Price"
)
# Boxplot for Coupon Discount
ggplot(data = merged_data, aes(y = coupon_discount)) +
geom_boxplot(outlier.shape = 16, outlier.colour = "red", outlier.fill = "red") +
scale_color_manual(values = c("black", "red")) +  # Custom colors for points
theme_minimal() +
labs(
title = "Boxplot for Coupon Discount",
y = "Coupon Discount"
)
# -----
# Dùng định nghĩa IQR để loại bỏ điểm dị biệt Outliner)
# -----
# ----------
# Step 0: Install and Load Packages
# ----------
required_packages <- c("this.path", "dplyr", "ggplot2", "lubridate", "geosphere",
"readr", "corrplot", "faraway", "car","ggthemes")
for (p in required_packages) {
if (!require(p, character.only = TRUE)) install.packages(p)
library(p, character.only = TRUE)
}
# ----------
# Step 1: Load and Merge Data
# ----------
setwd(this.path::here())
# Current Directory
cat("Current Directory:", getwd(), "\n")
# Load CSV files
dirty_data <- read_csv("data/dirty_data.csv")
missing_data <- read_csv("data/missing_data.csv")
warehouses <- read_csv("data/warehouses.csv")
# Parse date columns in dirty_data and missing_data
dirty_data$date <- parse_date_time(dirty_data$date, orders = c("mdy", "ymd", "dmy"))
missing_data$date <- parse_date_time(missing_data$date, orders = c("mdy", "ymd", "dmy"))
# Merge dirty_data and missing_data
merged_data <- rbind(dirty_data, missing_data)
# ----------
# Step 2: Clean Data
# ----------
# Convert 'season' to lowercase and fill missing values
merged_data$season <- tolower(merged_data$season)
month_value <- month(merged_data$date)
merged_data <- merged_data %>%
mutate(season = case_when(
!is.na(season) ~ season,  # Keep existing values
month_value %in% c(12, 1, 2) ~ "winter",
month_value %in% c(3, 4, 5) ~ "spring",
month_value %in% c(6, 7, 8) ~ "summer",
TRUE ~ "autumn"
))
# Fill missing values in 'is_happy_customer' using median
median_happy_customer <- round(median(merged_data$is_happy_customer, na.rm = TRUE), digits = 0)
merged_data$is_happy_customer[is.na(merged_data$is_happy_customer)] <- median_happy_customer
# Fill missing values in 'customer_lat' and 'customer_long' using mean
mean_customer_lat <- round(mean(merged_data$customer_lat, na.rm = TRUE), digits = 0)
mean_customer_long <- round(mean(merged_data$customer_long, na.rm = TRUE), digits = 0)
merged_data$customer_lat[is.na(merged_data$customer_lat)] <- mean_customer_lat
merged_data$customer_long[is.na(merged_data$customer_long)] <- mean_customer_long
# Clean order data: Fill NA values in 'order_total' and 'order_price'
merged_data <- merged_data %>%
mutate(
order_total = ifelse(
is.na(order_total),
order_price * (100 - coupon_discount) / 100 + delivery_charges,
order_total
),
order_price = ifelse(
is.na(order_price),
(order_total - delivery_charges) * 100 / (100 - coupon_discount),
order_price
)
)
# Step 3 : Distance
# Ma trận tọa độ khách hàng
customer_coords <- cbind(merged_data$customer_long, merged_data$customer_lat)
print(customer_coords)
# Ma trận tọa độ kho hàng
warehouse_coords <- cbind(warehouses$lon, warehouses$lat)
print(warehouse_coords)
# Tính khoảng cách giữa kho hàng và khách hàng
all_distances <- distm(customer_coords, warehouse_coords, fun = distVincentySphere)
# Khoảng cách nhỏ nhất (đơn vị: mét, chuyển sang kilomet)
min_distances <- apply(all_distances, 1, min)  # khoảng cách nhỏ nhất (m)
merged_data$distance_to_nearest_warehouse <- round(min_distances / 1000, 4)  # đổi sang km
# ----------
# Step 4: Check for Remaining Missing Values
# ----------
na_count <- colSums(is.na(merged_data))
cat("Remaining Missing Values in Each Column:\n")
print(na_count)
#----
# Use BoxPlot to check outliner (unexpected) 2 columns: distnace nearest warehouse and order_total
#-----
# -- Distance_Nearest Warehouses
# Boxplot for Distance to Nearest Warehouse
ggplot(data = merged_data, aes(y = distance_to_nearest_warehouse)) +
geom_boxplot(outlier.shape = 16, outlier.colour = "red", outlier.fill = "red") +
scale_color_manual(values = c("black", "red")) +  # Custom colors for points
theme_minimal() +
labs(
title = "Outlier of Distance to Nearest Warehouse",
y = "Distance to Nearest Warehouse"
)
# Boxplot for Delivery Charges
ggplot(data = merged_data, aes(y = delivery_charges)) +
geom_boxplot(outlier.shape = 16, outlier.colour = "red", outlier.fill = "red") +
scale_color_manual(values = c("black", "red")) +  # Custom colors for points
theme_minimal() +
labs(
title = "Outlier of Delivery Charge",
y = "Delivery Charges"
)
# Boxplot for Order Price
ggplot(data = merged_data, aes(y = order_price)) +
geom_boxplot(outlier.shape = 16, outlier.colour = "red", outlier.fill = "red") +
scale_color_manual(values = c("black", "red")) +  # Custom colors for points
theme_minimal() +
labs(
title = "Outlier of Order Price",
y = "Order Price"
)
# Boxplot for Coupon Discount
ggplot(data = merged_data, aes(y = coupon_discount)) +
geom_boxplot(outlier.shape = 16, outlier.colour = "red", outlier.fill = "red") +
scale_color_manual(values = c("black", "red")) +  # Custom colors for points
theme_minimal() +
labs(
title = "Outlier of Coupon Discount",
y = "Coupon Discount"
)
# Outlier Order Total
ggplot(data = merged_data, aes(y = order_total)) +
geom_boxplot(outlier.shape = 16, outlier.colour = "red", outlier.fill = "red") +
scale_color_manual(values = c("black", "red")) +  # Custom colors for points
theme_minimal() +
labs(
title = "Outlier of Order Total",
y = "Order Total"
)
# -----
# Dùng định nghĩa IQR để loại bỏ điểm dị biệt Outliner)
# -----
# ----------
# Step 0: Install and Load Packages
# ----------
required_packages <- c("this.path", "dplyr", "ggplot2", "lubridate", "geosphere",
"readr", "corrplot", "faraway", "car", "ggthemes")
# Install and load necessary packages
for (p in required_packages) {
if (!require(p, character.only = TRUE)) install.packages(p)
library(p, character.only = TRUE)
}
# ----------
# Step 1: Load and Merge Data
# ----------
# Set working directory
setwd(this.path::here())
# Print current working directory
cat("Current Directory:", getwd(), "\n")
# Load CSV files
dirty_data <- read_csv("data/dirty_data.csv")
missing_data <- read_csv("data/missing_data.csv")
warehouses <- read_csv("data/warehouses.csv")
# Parse date columns in dirty_data and missing_data
dirty_data$date <- parse_date_time(dirty_data$date, orders = c("mdy", "ymd", "dmy"))
missing_data$date <- parse_date_time(missing_data$date, orders = c("mdy", "ymd", "dmy"))
# Merge dirty_data and missing_data
merged_data <- rbind(dirty_data, missing_data)
# ----------
# Step 2: Clean Data
# ----------
# Convert 'season' to lowercase and fill missing values
merged_data$season <- tolower(merged_data$season)
month_value <- month(merged_data$date)
merged_data <- merged_data %>%
mutate(season = case_when(
!is.na(season) ~ season,  # Keep existing values
month_value %in% c(12, 1, 2) ~ "winter",
month_value %in% c(3, 4, 5) ~ "spring",
month_value %in% c(6, 7, 8) ~ "summer",
TRUE ~ "autumn"
))
# Fill missing values in 'is_happy_customer' using median
median_happy_customer <- round(median(merged_data$is_happy_customer, na.rm = TRUE), digits = 0)
merged_data$is_happy_customer[is.na(merged_data$is_happy_customer)] <- median_happy_customer
# Fill missing values in 'customer_lat' and 'customer_long' using mean
mean_customer_lat <- round(mean(merged_data$customer_lat, na.rm = TRUE), digits = 0)
mean_customer_long <- round(mean(merged_data$customer_long, na.rm = TRUE), digits = 0)
merged_data$customer_lat[is.na(merged_data$customer_lat)] <- mean_customer_lat
merged_data$customer_long[is.na(merged_data$customer_long)] <- mean_customer_long
# Clean order data: Fill NA values in 'order_total' and 'order_price'
merged_data <- merged_data %>%
mutate(
order_total = ifelse(
is.na(order_total),
order_price * (100 - coupon_discount) / 100 + delivery_charges,
order_total
),
order_price = ifelse(
is.na(order_price),
(order_total - delivery_charges) * 100 / (100 - coupon_discount),
order_price
)
)
# ----------
# Step 3: Distance Calculations
# ----------
# Create customer coordinates matrix
customer_coords <- cbind(merged_data$customer_long, merged_data$customer_lat)
# Create warehouse coordinates matrix
warehouse_coords <- cbind(warehouses$lon, warehouses$lat)
# Calculate distance between customers and warehouses
all_distances <- distm(customer_coords, warehouse_coords, fun = distVincentySphere)
# Find the minimum distance for each customer (in meters)
min_distances <- apply(all_distances, 1, min)
# Convert minimum distances to kilometers and store in merged_data
merged_data$distance_to_nearest_warehouse <- round(min_distances / 1000, 4)
# ----------
# Step 4: Check for Remaining Missing Values
# ----------
# Count remaining missing values in each column
na_count <- colSums(is.na(merged_data))
cat("Remaining Missing Values in Each Column:\n")
print(na_count)
# ----------
# Step 5: Outlier Detection Using Boxplots
# ----------
# Boxplot for Distance to Nearest Warehouse
ggplot(data = merged_data, aes(y = distance_to_nearest_warehouse)) +
geom_boxplot(outlier.shape = 16, outlier.colour = "red", outlier.fill = "red") +
theme_minimal() +
labs(
title = "Outlier of Distance to Nearest Warehouse",
y = "Distance to Nearest Warehouse"
)
# Boxplot for Delivery Charges
ggplot(data = merged_data, aes(y = delivery_charges)) +
geom_boxplot(outlier.shape = 16, outlier.colour = "red", outlier.fill = "red") +
theme_minimal() +
labs(
title = "Outlier of Delivery Charge",
y = "Delivery Charges"
)
# Boxplot for Order Price
ggplot(data = merged_data, aes(y = order_price)) +
geom_boxplot(outlier.shape = 16, outlier.colour = "red", outlier.fill = "red") +
theme_minimal() +
labs(
title = "Outlier of Order Price",
y = "Order Price"
)
# Boxplot for Coupon Discount
ggplot(data = merged_data, aes(y = coupon_discount)) +
geom_boxplot(outlier.shape = 16, outlier.colour = "red", outlier.fill = "red") +
theme_minimal() +
labs(
title = "Outlier of Coupon Discount",
y = "Coupon Discount"
)
# Boxplot for Order Total
ggplot(data = merged_data, aes(y = order_total)) +
geom_boxplot(outlier.shape = 16, outlier.colour = "red", outlier.fill = "red") +
theme_minimal() +
labs(
title = "Outlier of Order Total",
y = "Order Total"
)
# ----------
# Step 6: Remove Outliers Using IQR Method
# ----------
# Define IQR for removing outliers
Q1 <- quantile(merged_data$order_total, 0.25)
Q3 <- quantile(merged_data$order_total, 0.75)
IQR_value <- Q3 - Q1
# Filter out outliers in order_total using IQR
merged_data_cleaned <- merged_data %>%
filter(order_total >= (Q1 - 1.5 * IQR_value) & order_total <= (Q3 + 1.5 * IQR_value))
# ----------
# Step 6: Remove Outliers Using IQR Method
# ----------
# Define IQR for removing outliers
Q1 <- quantile(merged_data$distance_to_nearest_warehouse, 0.25)
Q3 <- quantile(merged_data$distance_to_nearest_warehouse, 0.75)
IQR_value <- Q3 - Q1
# Filter out outliers in order_total using IQR
merged_data_cleaned <- merged_data %>%
filter(distance_to_nearest_warehouse >= (Q1 - 1.5 * IQR_value) & distance_to_nearest_warehouse <= (Q3 + 1.5 * IQR_value))
# ----------
# Step 6: Remove Outliers Using IQR Method for distance_to_nearest_warehouse
# ----------
# Define IQR for distance_to_nearest_warehouse
Q1_dist <- quantile(merged_data$distance_to_nearest_warehouse, 0.25)
Q3_dist <- quantile(merged_data$distance_to_nearest_warehouse, 0.75)
IQR_dist <- Q3_dist - Q1_dist
# Filter out outliers in distance_to_nearest_warehouse using IQR
merged_data_cleaned <- merged_data %>%
filter(distance_to_nearest_warehouse >= (Q1_dist - 1.5 * IQR_dist) &
distance_to_nearest_warehouse <= (Q3_dist + 1.5 * IQR_dist))
# Check the filtered data
cat("Number of rows after removing outliers in distance_to_nearest_warehouse:", nrow(merged_data_cleaned), "\n")
View(merged_data_cleaned)
# ----------
# Step 6: Remove Outliers Using IQR Method for distance_to_nearest_warehouse in merged_data
# ----------
# Define IQR for distance_to_nearest_warehouse
Q1_dist <- quantile(merged_data$distance_to_nearest_warehouse, 0.25)
Q3_dist <- quantile(merged_data$distance_to_nearest_warehouse, 0.75)
IQR_dist <- Q3_dist - Q1_dist
# Filter out outliers in distance_to_nearest_warehouse using IQR and update merged_data directly
merged_data <- merged_data %>%
filter(distance_to_nearest_warehouse >= (Q1_dist - 1.5 * IQR_dist) &
distance_to_nearest_warehouse <= (Q3_dist + 1.5 * IQR_dist))
# Check the filtered data
cat("Number of rows after removing outliers in distance_to_nearest_warehouse:", nrow(merged_data), "\n")
# Xác định các giá trị outlier
Q1_dist <- quantile(merged_data$distance_to_nearest_warehouse, 0.25)
Q3_dist <- quantile(merged_data$distance_to_nearest_warehouse, 0.75)
IQR_dist <- Q3_dist - Q1_dist
# Thay thế outliers
merged_data$distance_to_nearest_warehouse <- ifelse(
merged_data$distance_to_nearest_warehouse < (Q1_dist - 1.5 * IQR_dist),
Q1_dist - 1.5 * IQR_dist,  # Thay thế bằng giá trị tại Q1 - 1.5 * IQR
ifelse(
merged_data$distance_to_nearest_warehouse > (Q3_dist + 1.5 * IQR_dist),
Q3_dist + 1.5 * IQR_dist,  # Thay thế bằng giá trị tại Q3 + 1.5 * IQR
merged_data$distance_to_nearest_warehouse  # Giữ nguyên giá trị nếu không phải outlier
)
)
# Kiểm tra kết quả sau khi sửa lỗi
cat("Số dòng sau khi sửa lỗi outliers trong distance_to_nearest_warehouse:", nrow(merged_data), "\n")
View(merged_data)
# ----------
# Step 0: Install and Load Packages
# ----------
required_packages <- c("this.path", "dplyr", "ggplot2", "lubridate", "geosphere",
"readr", "corrplot", "faraway", "car", "ggthemes")
# Install and load necessary packages
for (p in required_packages) {
if (!require(p, character.only = TRUE)) install.packages(p)
library(p, character.only = TRUE)
}
# ----------
# Step 1: Load and Merge Data
# ----------
# Set working directory
setwd(this.path::here())
# Print current working directory
cat("Current Directory:", getwd(), "\n")
# Load CSV files
dirty_data <- read_csv("data/dirty_data.csv")
missing_data <- read_csv("data/missing_data.csv")
warehouses <- read_csv("data/warehouses.csv")
# Parse date columns in dirty_data and missing_data
dirty_data$date <- parse_date_time(dirty_data$date, orders = c("mdy", "ymd", "dmy"))
missing_data$date <- parse_date_time(missing_data$date, orders = c("mdy", "ymd", "dmy"))
# Merge dirty_data and missing_data
merged_data <- rbind(dirty_data, missing_data)
# ----------
# Step 2: Clean Data
# ----------
# Convert 'season' to lowercase and fill missing values
merged_data$season <- tolower(merged_data$season)
month_value <- month(merged_data$date)
merged_data <- merged_data %>%
mutate(season = case_when(
!is.na(season) ~ season,  # Keep existing values
month_value %in% c(12, 1, 2) ~ "winter",
month_value %in% c(3, 4, 5) ~ "spring",
month_value %in% c(6, 7, 8) ~ "summer",
TRUE ~ "autumn"
))
# Fill missing values in 'is_happy_customer' using median
median_happy_customer <- round(median(merged_data$is_happy_customer, na.rm = TRUE), digits = 0)
merged_data$is_happy_customer[is.na(merged_data$is_happy_customer)] <- median_happy_customer
# Fill missing values in 'customer_lat' and 'customer_long' using mean
mean_customer_lat <- round(mean(merged_data$customer_lat, na.rm = TRUE), digits = 0)
mean_customer_long <- round(mean(merged_data$customer_long, na.rm = TRUE), digits = 0)
merged_data$customer_lat[is.na(merged_data$customer_lat)] <- mean_customer_lat
merged_data$customer_long[is.na(merged_data$customer_long)] <- mean_customer_long
# Clean order data: Fill NA values in 'order_total' and 'order_price'
merged_data <- merged_data %>%
mutate(
order_total = ifelse(
is.na(order_total),
order_price * (100 - coupon_discount) / 100 + delivery_charges,
order_total
),
order_price = ifelse(
is.na(order_price),
(order_total - delivery_charges) * 100 / (100 - coupon_discount),
order_price
)
)
# ----------
# Step 3: Distance Calculations
# ----------
# Create customer coordinates matrix
customer_coords <- cbind(merged_data$customer_long, merged_data$customer_lat)
# Create warehouse coordinates matrix
warehouse_coords <- cbind(warehouses$lon, warehouses$lat)
# Calculate distance between customers and warehouses
all_distances <- distm(customer_coords, warehouse_coords, fun = distVincentySphere)
# Find the minimum distance for each customer (in meters)
min_distances <- apply(all_distances, 1, min)
# Convert minimum distances to kilometers and store in merged_data
merged_data$distance_to_nearest_warehouse <- round(min_distances / 1000, 4)
# ----------
# Step 4: Check for Remaining Missing Values
# ----------
# Count remaining missing values in each column
na_count <- colSums(is.na(merged_data))
cat("Remaining Missing Values in Each Column:\n")
print(na_count)
# ----------
# Step 5: Outlier Detection Using Boxplots
# ----------
# Boxplot for Distance to Nearest Warehouse
ggplot(data = merged_data, aes(y = distance_to_nearest_warehouse)) +
geom_boxplot(outlier.shape = 16, outlier.colour = "red", outlier.fill = "red") +
theme_minimal() +
labs(
title = "Outlier of Distance to Nearest Warehouse",
y = "Distance to Nearest Warehouse"
)
# Boxplot for Delivery Charges
ggplot(data = merged_data, aes(y = delivery_charges)) +
geom_boxplot(outlier.shape = 16, outlier.colour = "red", outlier.fill = "red") +
theme_minimal() +
labs(
title = "Outlier of Delivery Charge",
y = "Delivery Charges"
)
# Boxplot for Order Price
ggplot(data = merged_data, aes(y = order_price)) +
geom_boxplot(outlier.shape = 16, outlier.colour = "red", outlier.fill = "red") +
theme_minimal() +
labs(
title = "Outlier of Order Price",
y = "Order Price"
)
# Boxplot for Coupon Discount
ggplot(data = merged_data, aes(y = coupon_discount)) +
geom_boxplot(outlier.shape = 16, outlier.colour = "red", outlier.fill = "red") +
theme_minimal() +
labs(
title = "Outlier of Coupon Discount",
y = "Coupon Discount"
)
# Boxplot for Order Total
ggplot(data = merged_data, aes(y = order_total)) +
geom_boxplot(outlier.shape = 16, outlier.colour = "red", outlier.fill = "red") +
theme_minimal() +
labs(
title = "Outlier of Order Total",
y = "Order Total"
)
# ----------
# Step 6: Remove Outliers Using IQR Method for distance_to_nearest_warehouse in merged_data
# ----------
# Define IQR for distance_to_nearest_warehouse
# ----------
# Step 6: Remove Outliers Using IQR Method for distance_to_nearest_warehouse in merged_data
# ----------
# Define IQR for distance_to_nearest_warehouse
d1=quantile(new_data$order_price)
d1 = quantile(new_data$order_price)
d1 = quantile(merged_data$order_price)
print(d1)
